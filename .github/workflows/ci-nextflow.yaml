name: Nextflow Workflow CI (kind + Argo Workflows)

on:
  push:
    branches:
      - main
      - feature/*
      - debug/*
    paths:
      - 'helm/**'
      - 'authz-adapter/**'
      - '.github/workflows/ci-nextflow.yaml'
      - 'test-workflows/**'

env:
  KIND_CLUSTER_NAME: nextflow-test
  KUBECONFIG: /tmp/kubeconfig

jobs:
  nextflow-workflow-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Docker
        run: |
          sudo systemctl start docker
          sudo chmod 666 /var/run/docker.sock

      - name: Create kind config file
        run: |
          cat > kind-config.yaml << 'EOF'
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
            - containerPort: 2746
              hostPort: 2746
              protocol: TCP
          EOF

      - name: Setup kind
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: ${{ env.KIND_CLUSTER_NAME }}
          config: kind-config.yaml

      - name: Verify kind cluster
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods -A

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.3

      - name: Add chart repositories
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

      - name: Install NGINX Ingress Controller
        run: |
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.type=NodePort \
            --set controller.admissionWebhooks.enabled=false \
            --wait --timeout=5m

      - name: Build Helm dependencies
        run: |
          helm dependency build helm/argo-stack

      - name: Install Argo Stack with test values
        run: |
          # Create test values for CI
          cat > ci-nextflow-values.yaml << EOF
          # Namespace configuration
          namespaces:
            argo: argo-workflows
            security: authz-security
            
          # Ingress configuration
          ingress:
            argoWorkflows:
              enabled: true
              host: localhost
              tls:
                enabled: false
          
          # Auth configuration for testing
          ingressAuth:
            enabled: false  # Disable for initial testing
            
          # Argo Workflows configuration
          argo-workflows:
            controller:
              persistence:
                connectionPool:
                  maxIdleConns: 100
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
            server:
              extraArgs:
                - --auth-mode=server
                - --secure=false
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
          
          # AuthZ Adapter configuration
          authzAdapter:
            enabled: true
            image:
              repository: python
              tag: "3.12-slim"
              pullPolicy: Always
            env:
              FENCE_BASE: "https://fake-fence.example.com/user"
              HTTP_TIMEOUT: "5.0"
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          
          # ArgoCD configuration (optional for workflow testing)
          argo-cd:
            server:
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
          EOF

          # create namespace if not exists
          # kubectl get namespace argocd || kubectl create namespace argocd
          # kubectl label namespace argocd app.kubernetes.io/managed-by=Helm --overwrite

          # Render the Helm template
          helm template argo-stack helm/argo-stack \
          --values helm/argo-stack/values.yaml \
          --namespace argocd > rendered.yaml


          # Install the stack
          # --values ci-nextflow-values.yaml \
           helm upgrade --install argo-stack ./helm/argo-stack

      - name: Wait for Argo Workflows to be ready
        run: |
          echo "Waiting for Argo Workflows controller..."
          kubectl wait --for=condition=Ready pod   -l app.kubernetes.io/component=workflow-controller   --timeout=120s --all-namespaces
          # kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argo-workflows-controller \
          #   -n argo-workflows --timeout=300s
          
          echo "Waiting for Argo Workflows server..."
          kubectl wait --for=condition=Ready pod   -l app.kubernetes.io/component=server   --timeout=120s --all-namespaces
          # kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argo-workflows-server \
          #   -n argo-workflows --timeout=300s
          
          echo "Checking pod status..."
          # kubectl get pods -n argo-workflows
          kubectl get pods
          kubectl get pods -n authz-security || true

      - name: Setup port forwarding for Argo Workflows
        run: |
          # kubectl port-forward -n argo-workflows svc/argo-workflows-server 2746:2746 &
          kubectl port-forward svc/argo-stack-argo-workflows-server 2746:2746 &
          sleep 10
          
          # Test connectivity
          curl -f http://localhost:2746/ || true

      - name: Install Python dependencies for testing
        run: |
          pip install requests pyyaml kubernetes

      - name: Run Nextflow workflow test
        run: |
          echo "Running Nextflow workflow execution test..."
          cd test-workflows
          ./setup-rbac.sh
          cd ..
          python test-workflows/test_nextflow_execution.py

      - name: Check final cluster state
        run: |
          echo "=== Final cluster state ==="
          kubectl get workflows -n wf-poc
          kubectl get pods -n wf-poc
          
          echo "=== Workflow events ==="
          kubectl get events -n wf-poc --sort-by=.metadata.creationTimestamp || true

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up port forwards..."
          pkill -f "kubectl port-forward" || true
          
          echo "Cleaning up completed workflows..."
          kubectl delete workflows -n argo-workflows -l workflows.argoproj.io/test=nextflow-hello --ignore-not-found=true || true
