namespaces:
  argo: argo-workflows
  argocd: argocd
  tenant: wf-poc
  security: security
  argo-events: argo-events

# Argo Workflows dependency values
argo-workflows:
  server:
    enabled: true
    secure: false
    extraArgs:
      - --auth-mode=server
  controller:
    workflowNamespaces:
      - wf-poc
    # Ensure controller uses correct namespace
    namespaceInstallMode: true
  # Force namespace for all Argo Workflows components
  namespaceOverride: argo-workflows

# Argo CD dependency values
argo-cd:
  applications:
    enabled: true
    namespace: argocd                       # where Argo CD runs
  namespaceOverride: argocd


# Our adapter settings
authzAdapter:
  image: ghcr.io/calypr/argo-helm:latest
  fenceBase: "https://calypr-dev.ohsu.edu/user"
  replicas: 2
  # Ensure adapter uses security namespace
  namespace: security

# On-prem S3 artifacts for Argo Workflows
s3:
  enabled: false
  hostname: ""
  bucket: ""
  region: "us-west-2"
  insecure: false
  pathStyle: true
  accessKey: ""
  secretKey: ""

# Ingresses we ship (toggle/hosts)
ingress:
  argoWorkflows:
    enabled: true
    host: "argo.localtest.me"
    tls:
      enabled: false
      secretName: ""
  argocd:
    enabled: true
    host: "argocd.localtest.me"
    tls:
      enabled: false
      secretName: ""

# NGINX auth to the adapter
ingressAuth:
  enabled: true
  authURL: "http://authz-adapter.security.svc.cluster.local:8080/check"
  passAuthorization: true

# Optional: Argo CD Application pointing to nextflow repo
argocdApplication:
  enabled: true
  name: nextflow-hello
  project: default
  repoURL: "https://github.com/bwalsh/nextflow-hello-project.git"
  targetRevision: "main"
  path: "."
  # IMPORTANT: do not template here. Either leave empty or set a literal default.
#   destinationNamespace: ""   # leave empty and let the template default to .Values.namespaces.tenant


events:
  enabled: true
  namespace: argo-events

  eventBus:
    create: true
    name: default
    natsNative: {}  # use NATS native by default

  github:
    enabled: true
    name: github
    eventName: repo-push
    owner: bwalsh           # <-- change as needed
    repository: nextflow-hello-project   # <-- change as needed
    events: ["push"]
    active: true

    # Webhook service exposed by EventSource
    webhook:
      endpoint: /events
      port: 12000
      service:
        type: ClusterIP
      ingress:
        enabled: false
        className: nginx
        hosts: []
        tls: []

    # Secret holding either a GitHub PAT (for webhook management)
    # or a webhook secret. If tokenValue is empty, no Secret will be created.
    # Let Helm create the Secret (simple for testing)
    # kubectl -n argo-events create secret generic github-secret   --from-literal=token=github_pat_XXXXXXXX
    secret:
      create: false
      name: github-secret
      tokenKey: token
      # tokenValue: ""

  sensor:
    enabled: true
    name: run-nextflow-on-push
    workflowNamespace: argo-workflows
    workflowTemplateRef: nextflow-hello-template
    parameters:
      - name: git_revision
        valueFrom: "{{(events.push.body.head_commit.id)}}"  # from GitHub payload

workflowTemplates:
  createExample: true
  namespace: argo-workflows
  nextflowHello:
    name: nextflow-hello-template
    image: alpine:3.20
    command: ["/bin/sh", "-c"]
    args:
      - echo "Hello from Argo Events!"

